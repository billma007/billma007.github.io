<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bill Ma&#39;s Blog</title>
  
  <subtitle>Welcome!</subtitle>
  <link href="https://billma.top/atom.xml" rel="self"/>
  
  <link href="https://billma.top/"/>
  <updated>2021-08-23T12:23:10.000Z</updated>
  <id>https://billma.top/</id>
  
  <author>
    <name>Bill Ma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不同的C++中求解A+B的方法</title>
    <link href="https://billma.top/2021/08/23/a-b-problem/"/>
    <id>https://billma.top/2021/08/23/a-b-problem/</id>
    <published>2021-08-23T11:59:56.000Z</published>
    <updated>2021-08-23T12:23:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基础算法"><a href="#1-基础算法" class="headerlink" title="1.基础算法"></a>1.基础算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> a,b;</span><br><span class="line"> cin&gt;&gt;a;</span><br><span class="line"> cin&gt;&gt;b;</span><br><span class="line"> cout&lt;&lt;a+b&lt;&lt;endl;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a+b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Link-Cut-Tree"><a href="#2-Link-Cut-Tree" class="headerlink" title="2.Link-Cut Tree"></a>2.Link-Cut Tree</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data,rev,sum;</span><br><span class="line">    node *son[<span class="number">2</span>],*pre;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setson</span><span class="params">(node *child,<span class="keyword">int</span> lr)</span></span>;</span><br><span class="line">&#125;lct[<span class="number">233</span>];</span><br><span class="line"><span class="keyword">int</span> top,a,b;</span><br><span class="line"><span class="function">node *<span class="title">getnew</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *now=lct+ ++top;</span><br><span class="line">    now-&gt;data=x;</span><br><span class="line">    now-&gt;pre=now-&gt;son[<span class="number">1</span>]=now-&gt;son[<span class="number">0</span>]=lct;</span><br><span class="line">    now-&gt;sum=<span class="number">0</span>;</span><br><span class="line">    now-&gt;rev=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">node::judge</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> pre-&gt;son[<span class="number">1</span>]==<span class="keyword">this</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">node::isroot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pre==lct)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> !(pre-&gt;son[<span class="number">1</span>]==<span class="keyword">this</span>||pre-&gt;son[<span class="number">0</span>]==<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">node::pushdown</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>==lct||!rev)<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">swap</span>(son[<span class="number">0</span>],son[<span class="number">1</span>]);</span><br><span class="line">    son[<span class="number">0</span>]-&gt;rev^=<span class="number">1</span>;</span><br><span class="line">    son[<span class="number">1</span>]-&gt;rev^=<span class="number">1</span>;</span><br><span class="line">    rev=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">node::update</span><span class="params">()</span></span>&#123;sum=son[<span class="number">1</span>]-&gt;sum+son[<span class="number">0</span>]-&gt;sum+data;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">node::setson</span><span class="params">(node *child,<span class="keyword">int</span> lr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    child-&gt;pre=<span class="keyword">this</span>;</span><br><span class="line">    son[lr]=child;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">update</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(node *now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *father=now-&gt;pre,*grandfa=father-&gt;pre;</span><br><span class="line">    <span class="keyword">if</span>(!father-&gt;<span class="built_in">isroot</span>()) grandfa-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    father-&gt;<span class="built_in">pushdown</span>();now-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="keyword">int</span> lr=now-&gt;<span class="built_in">judge</span>();</span><br><span class="line">    father-&gt;<span class="built_in">setson</span>(now-&gt;son[lr^<span class="number">1</span>],lr);</span><br><span class="line">    <span class="keyword">if</span>(father-&gt;<span class="built_in">isroot</span>()) now-&gt;pre=grandfa;</span><br><span class="line">    <span class="keyword">else</span> grandfa-&gt;<span class="built_in">setson</span>(now,father-&gt;<span class="built_in">judge</span>());</span><br><span class="line">    now-&gt;<span class="built_in">setson</span>(father,lr^<span class="number">1</span>);</span><br><span class="line">    father-&gt;<span class="built_in">update</span>();now-&gt;<span class="built_in">update</span>();</span><br><span class="line">    <span class="keyword">if</span>(grandfa!=lct) grandfa-&gt;<span class="built_in">update</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(node *now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(now-&gt;<span class="built_in">isroot</span>())<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!now-&gt;<span class="built_in">isroot</span>();<span class="built_in">rotate</span>(now))</span><br><span class="line">    <span class="keyword">if</span>(!now-&gt;pre-&gt;<span class="built_in">isroot</span>())</span><br><span class="line">    now-&gt;<span class="built_in">judge</span>()==now-&gt;pre-&gt;<span class="built_in">judge</span>()?<span class="built_in">rotate</span>(now-&gt;pre):<span class="built_in">rotate</span>(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node *<span class="title">access</span><span class="params">(node *now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *last=lct;</span><br><span class="line">    <span class="keyword">for</span>(;now!=lct;last=now,now=now-&gt;pre)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">splay</span>(now);</span><br><span class="line">        now-&gt;<span class="built_in">setson</span>(last,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeroot</span><span class="params">(node *now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(now)-&gt;rev^=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">splay</span>(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(node *x,node *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">changeroot</span>(x);</span><br><span class="line">    x-&gt;pre=y;</span><br><span class="line">    <span class="built_in">access</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(node *x,node *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">changeroot</span>(x);</span><br><span class="line">    <span class="built_in">access</span>(y);</span><br><span class="line">    <span class="built_in">splay</span>(x);</span><br><span class="line">    x-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    x-&gt;son[<span class="number">1</span>]=y-&gt;pre=lct;</span><br><span class="line">    x-&gt;<span class="built_in">update</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(node *x,node *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">changeroot</span>(x);</span><br><span class="line">    node *now=<span class="built_in">access</span>(y);</span><br><span class="line">    <span class="keyword">return</span> now-&gt;sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    node *A=<span class="built_in">getnew</span>(a);</span><br><span class="line">    node *B=<span class="built_in">getnew</span>(b);</span><br><span class="line">        <span class="built_in">connect</span>(A,B);</span><br><span class="line">        <span class="built_in">cut</span>(A,B);</span><br><span class="line">        <span class="built_in">connect</span>(A,B);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(A,B)); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-SFPA"><a href="#3-SFPA" class="headerlink" title="3.SFPA"></a>3.SFPA</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,m,a,b,op,head[<span class="number">200009</span>],next[<span class="number">200009</span>],dis[<span class="number">200009</span>],len[<span class="number">200009</span>],v[<span class="number">200009</span>],l,r,team[<span class="number">200009</span>],pd[<span class="number">100009</span>],u,v1,e;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lt</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    op++,v[op]=y;</span><br><span class="line">    next[op]=head[x],head[x]=op,len[op]=z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> f)</span><span class="comment">//SPFA……</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200009</span>;i++)&#123;dis[i]=<span class="number">999999999</span>;&#125;</span><br><span class="line">    l=<span class="number">0</span>,r=<span class="number">1</span>,team[<span class="number">1</span>]=s,pd[s]=<span class="number">1</span>,dis[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l!=r)</span><br><span class="line">    &#123;</span><br><span class="line">        l=(l+<span class="number">1</span>)%<span class="number">90000</span>,u=team[l],pd[u]=<span class="number">0</span>,e=head[u];</span><br><span class="line">        <span class="keyword">while</span>(e!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            v1=v[e];</span><br><span class="line">            <span class="keyword">if</span>(dis[v1]&gt;dis[u]+len[e])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v1]=dis[u]+len[e];</span><br><span class="line">                <span class="keyword">if</span>(!pd[v1])</span><br><span class="line">                &#123;</span><br><span class="line">                    r=(r+<span class="number">1</span>)%<span class="number">90000</span>,</span><br><span class="line">                    team[r]=v1,</span><br><span class="line">                    pd[v1]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            e=next[e];</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[f];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">lt</span>(<span class="number">1</span>,<span class="number">2</span>,a);<span class="built_in">lt</span>(<span class="number">2</span>,<span class="number">3</span>,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">SPFA</span>(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Floyed"><a href="#4-Floyed" class="headerlink" title="4.Floyed"></a>4.Floyed</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n=<span class="number">3</span>,a,b,dis[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dis[i][j]=<span class="number">2147483647</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[<span class="number">1</span>][<span class="number">2</span>]=a,dis[<span class="number">2</span>][<span class="number">3</span>]=b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[i][j]=<span class="built_in">min</span>(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dis[<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-递归算法"><a href="#5-递归算法" class="headerlink" title="5.递归算法"></a>5.递归算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,b,c;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dg</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=<span class="number">5</span>)&#123;<span class="keyword">return</span> a;&#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">dg</span>(a/<span class="number">2</span>)+<span class="built_in">dg</span>(a-a/<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    c=<span class="built_in">dg</span>(a)+<span class="built_in">dg</span>(b);</span><br><span class="line">    cout&lt;&lt;c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-高精度计算"><a href="#6-高精度计算" class="headerlink" title="6.高精度计算"></a>6.高精度计算</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a1[<span class="number">1000</span>],b1[<span class="number">1000</span>];</span><br><span class="line">      <span class="keyword">int</span> a[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;,b[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;,c[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;,la,lb,lc,i,x;</span><br><span class="line">      cin&gt;&gt;a1&gt;&gt;b1;</span><br><span class="line">      la=<span class="built_in">strlen</span>(a1);</span><br><span class="line">      lb=<span class="built_in">strlen</span>(b1);</span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=la<span class="number">-1</span>;i++)&#123;a[la-i]=a1[i]<span class="number">-48</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lb<span class="number">-1</span>;i++)&#123;b[lb-i]=b1[i]<span class="number">-48</span>;&#125;</span><br><span class="line">      lc=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lc&lt;=la||lc&lt;=lb)&#123;c[lc]=a[lc]+b[lc]+x,x=c[lc]/<span class="number">10</span>,c[lc]%=<span class="number">10</span>,lc++;&#125;</span><br><span class="line">    c[lc]=x;</span><br><span class="line">    <span class="keyword">if</span>(c[lc]==<span class="number">0</span>)&#123;lc--;&#125;</span><br><span class="line">    <span class="keyword">for</span>(i=lc;i&gt;=<span class="number">1</span>;i--)&#123;cout&lt;&lt;c[i];&#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-压位高精"><a href="#7-压位高精" class="headerlink" title="7.压位高精"></a>7.压位高精</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> p 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> carry 100000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn=<span class="number">50001</span>;  </span><br><span class="line"><span class="keyword">char</span> s1[Maxn],s2[Maxn];  </span><br><span class="line"><span class="keyword">int</span> a[Maxn],b[Maxn],ans[Maxn];  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> n[])</span>   </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">char</span> temp[Maxn];   </span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>),cur=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(len/p)</span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">strncpy</span>(temp,s+len-p+<span class="number">1</span>,p);</span><br><span class="line">        n[++cur]=<span class="built_in">atoi</span>(temp); </span><br><span class="line">        len-=p;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(temp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(temp));  </span><br><span class="line">        <span class="built_in">strncpy</span>(temp,s+<span class="number">1</span>,len);  </span><br><span class="line">        n[++cur]=<span class="built_in">atoi</span>(temp);   </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> c[],<span class="keyword">int</span> l1,<span class="keyword">int</span> l2)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,l3=<span class="built_in">max</span>(l1,l2);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l3;i++)</span><br><span class="line">    &#123;  </span><br><span class="line">        c[i]=a[i]+b[i]+x;  </span><br><span class="line">        x=c[i]/carry;</span><br><span class="line">        c[i]%=carry;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;c[++l3]=x%<span class="number">10</span>;x/=<span class="number">10</span>;&#125;  </span><br><span class="line">    <span class="keyword">return</span> l3;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> len)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[len]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)<span class="built_in">printf</span>(<span class="string">&quot;%0*d&quot;</span>,p,a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,s1+<span class="number">1</span>,s2+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> la=<span class="built_in">change</span>(s1,a);</span><br><span class="line">    <span class="keyword">int</span> lb=<span class="built_in">change</span>(s2,b);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">add</span>(a,b,ans,la,lb);    </span><br><span class="line">    <span class="built_in">print</span>(ans,len);</span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-树状数组"><a href="#8-树状数组" class="headerlink" title="8.树状数组"></a>8.树状数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&amp;(-a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">2</span>,m=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans[m+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> a[n+<span class="number">1</span>],c[n+<span class="number">1</span>],s[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> o=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">    s[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        s[i]=s[i<span class="number">-1</span>]+a[i];</span><br><span class="line">        c[i]=s[i]-s[i-<span class="built_in">lowbit</span>(i)];<span class="comment">//树状数组创建前缀和优化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> q=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(q==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">int</span> x,y;</span><br><span class="line">           cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">           <span class="keyword">int</span> j=x;</span><br><span class="line">           <span class="keyword">while</span>(j&lt;=n)</span><br><span class="line">           &#123;</span><br><span class="line">               c[j]+=y;</span><br><span class="line">               j+=<span class="built_in">lowbit</span>(j);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=<span class="number">1</span>,y=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> s1=<span class="number">0</span>,s2=<span class="number">0</span>,p=x<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(p&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s1+=c[p];</span><br><span class="line">                p-=<span class="built_in">lowbit</span>(p);</span><br><span class="line">            &#125;</span><br><span class="line">            p=y;</span><br><span class="line">            <span class="keyword">while</span>(p&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s2+=c[p];</span><br><span class="line">                p-=<span class="built_in">lowbit</span>(p);</span><br><span class="line">            &#125;    </span><br><span class="line">            o++;</span><br><span class="line">            ans[o]=s2-s1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=o;i++)</span><br><span class="line">        cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-粗暴模拟人工运算"><a href="#9-粗暴模拟人工运算" class="headerlink" title="9.粗暴模拟人工运算"></a>9.粗暴模拟人工运算</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> fu=<span class="number">1</span>,f=<span class="number">1</span>,a,b,c=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>&amp;&amp;b&gt;<span class="number">0</span>)fu=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;<span class="number">0</span>&amp;&amp;b&lt;<span class="number">0</span>)fu=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>&amp;&amp;b&lt;<span class="number">0</span>)f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>)&#123;cout&lt;&lt;b;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;cout&lt;&lt;a;<span class="keyword">return</span> <span class="number">0</span>;&#125; </span><br><span class="line">    a=<span class="built_in">abs</span>(a);</span><br><span class="line">    b=<span class="built_in">abs</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b&amp;&amp;fu==<span class="number">3</span>)f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b&gt;a&amp;&amp;fu==<span class="number">3</span>)f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b&gt;a&amp;&amp;fu==<span class="number">2</span>)f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b&lt;a&amp;&amp;fu==<span class="number">2</span>)f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(fu==<span class="number">1</span>)c=a+b;</span><br><span class="line">    <span class="keyword">if</span>(fu&gt;<span class="number">1</span>)c=<span class="built_in">max</span>(a,b)-<span class="built_in">min</span>(a,b);</span><br><span class="line">    c*=f;</span><br><span class="line">    cout&lt;&lt;c;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-Dijkstra-STL的优先队列优化"><a href="#10-Dijkstra-STL的优先队列优化" class="headerlink" title="10.Dijkstra+STL的优先队列优化"></a>10.Dijkstra+STL的优先队列优化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">405</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,w;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Edge&gt; edge[N*N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dis[N*N];</span><br><span class="line"><span class="keyword">bool</span> vis[N*N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dis[a]&gt;dis[b];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;,cmp&gt; dijQue;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">-1</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    dijQue.<span class="built_in">push</span>(start);</span><br><span class="line">    dis[start]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!dijQue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u=dijQue.<span class="built_in">top</span>();</span><br><span class="line">        dijQue.<span class="built_in">pop</span>();</span><br><span class="line">        vis[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(u==end)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;edge[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v=edge[u][i].v;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]==<span class="number">-1</span> || dis[v]&gt;dis[u]+edge[u][i].w) &#123;</span><br><span class="line">                dis[v]=dis[u]+edge[u][i].w;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v]) &#123;</span><br><span class="line">                    vis[v]=<span class="literal">true</span>;</span><br><span class="line">                    dijQue.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[end];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    Edge Qpush;</span><br><span class="line">    </span><br><span class="line">    Qpush.v=<span class="number">1</span>;</span><br><span class="line">    Qpush.w=a;</span><br><span class="line">    edge[<span class="number">0</span>].<span class="built_in">push_back</span>(Qpush);</span><br><span class="line">    </span><br><span class="line">    Qpush.v=<span class="number">2</span>;</span><br><span class="line">    Qpush.w=b;</span><br><span class="line">    edge[<span class="number">1</span>].<span class="built_in">push_back</span>(Qpush);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">Dijkstra</span>(<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-分治算法（二分法）"><a href="#11-分治算法（二分法）" class="headerlink" title="11.分治算法（二分法）"></a>11.分治算法（二分法）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="keyword">long</span> <span class="keyword">long</span> l=-<span class="built_in"><span class="keyword">int</span></span>(<span class="number">1e9</span>)&lt;&lt;<span class="number">1</span>,r=<span class="built_in"><span class="keyword">int</span></span>(<span class="number">1e9</span>)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">     <span class="keyword">while</span>(r-l&gt;<span class="number">1</span>)&#123;c=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">         <span class="keyword">if</span>(c-b&lt;a)l=c;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(c-b&gt;a)r=c;</span><br><span class="line">             <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c),<span class="number">0</span>;</span><br><span class="line">     &#125;<span class="keyword">if</span>(l!=r)<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,r),<span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="12-位运算"><a href="#12-位运算" class="headerlink" title="12.位运算"></a>12.位运算</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> u = m &amp; n;</span><br><span class="line">    <span class="keyword">int</span> v = m ^ n;</span><br><span class="line">    <span class="keyword">while</span> (u) &#123;</span><br><span class="line">        <span class="keyword">int</span> s = v;</span><br><span class="line">        <span class="keyword">int</span> t = u &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        u = s &amp; t;</span><br><span class="line">        v = s ^ t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-线段树"><a href="#13-线段树" class="headerlink" title="13.线段树"></a>13.线段树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,l,r;</span><br><span class="line">&#125;;</span><br><span class="line">node t[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>],f[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> node)</span></span>&#123;</span><br><span class="line">    t[node].l=l;t[node].r=r;t[node].val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        f[l]=node;</span><br><span class="line">        t[node].val=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(l,mid,node*<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,r,node*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    t[node].val=t[node*<span class="number">2</span>].val+t[node*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> fa=node&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    t[fa].val=t[fa*<span class="number">2</span>].val+t[fa*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">    <span class="built_in">update</span>(fa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[node].l==l&amp;&amp;t[node].r==r)&#123;</span><br><span class="line">        <span class="keyword">return</span> t[node].val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lc=node*<span class="number">2</span>;<span class="keyword">int</span> rc=lc+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[lc].r&gt;=l)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t[lc].r&gt;=r)&#123;</span><br><span class="line">            sum+=<span class="built_in">find</span>(l,r,lc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            sum+=<span class="built_in">find</span>(l,t[lc].r,lc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t[rc].l&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t[rc].l&lt;=l)&#123;</span><br><span class="line">            sum+=<span class="built_in">find</span>(l,r,rc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            sum+=<span class="built_in">find</span>(t[rc].l,r,rc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">find</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-快读"><a href="#14-快读" class="headerlink" title="14.快读"></a>14.快读</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">read</span>()+<span class="built_in">read</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-基础算法&quot;&gt;&lt;a href=&quot;#1-基础算法&quot; class=&quot;headerlink&quot; title=&quot;1.基础算法&quot;&gt;&lt;/a&gt;1.基础算法&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>csp指南</title>
    <link href="https://billma.top/2021/08/23/csp/"/>
    <id>https://billma.top/2021/08/23/csp/</id>
    <published>2021-08-23T11:40:05.000Z</published>
    <updated>2021-08-24T03:27:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/blog/334586/csp-pre-knowledge">点此前往</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/blog/334586/csp-pre-knowledge&quot;&gt;点此前往&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>世界最大同性交友网站七夕再搞事————remote  ：Support for password authentication was removed on August 13, 2021.</title>
    <link href="https://billma.top/2021/08/21/github-tokenerror/"/>
    <id>https://billma.top/2021/08/21/github-tokenerror/</id>
    <published>2021-08-21T07:39:00.000Z</published>
    <updated>2021-08-22T08:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>原创文章，转载注明出处！</strong></p><h3 id="1-问题背景-background"><a href="#1-问题背景-background" class="headerlink" title="1.问题背景-background"></a>1.问题背景-background</h3><p>如果你在七夕（没错就是2021年8月14日）<strong>的这一天去访问了全球最大的同性交友网站</strong>，<strong>又刚好去更新提交代码</strong>，<strong>或者你创建了一个新的仓库送给自己</strong>，<strong>又刚好想把这个仓库送给github</strong>，你就刚好会遇到这个问题：remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.<br>大概意思就是你原先的密码凭证从2021年8月13日开始就不能用了，必须使用个人访问令牌（personal access token），就是把你的密码替换成token！</p><p><strong>滚！我tm懒得弄！</strong></p><p><img src="https://i.postimg.cc/zG2L02b1/Q-R9-VOLZG-DIN2-V0-HF-S8.png"> </p><p> <strong>Github <a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/">官方解释</a></strong></p><blockquote><p>We described our motivation as we announced similar changes to authenticating with the API as follows:</p></blockquote><blockquote><p>In recent years, GitHub customers have benefited from a number of security enhancements to GitHub.com, such as two-factor authentication, sign-in alerts, verified devices, preventing the use of compromised passwords, and WebAuthn support. These features make it more difficult for an attacker to take a password that’s been reused across multiple websites and use it to try to gain access to your GitHub account. Despite these improvements, for historical reasons customers without two-factor authentication enabled have been able to continue to authenticate Git and API operations using only their GitHub username and password.</p></blockquote><blockquote><p>Beginning August 13, 2021, we will no longer accept account passwords when authenticating Git operations and will require the use of token-based authentication, such as a personal access token (for developers) or an OAuth or GitHub App installation token (for integrators) for all authenticated Git operations on GitHub.com. You may also continue using SSH keys where you prefer.</p></blockquote><blockquote><p>Tokens offer a number of security benefits over password-based authentication:</p></blockquote><blockquote><p>1.Unique – tokens are specific to GitHub and can be generated per use or per device</p></blockquote><blockquote><p>2.Revocable – tokens can can be individually revoked at any time without needing to update unaffected credentials</p></blockquote><blockquote><p>3.Limited – tokens can be narrowly scoped to allow only the access necessary for the use case</p></blockquote><blockquote><p>4.Random – tokens are not subject to the types of dictionary or brute force attempts that simpler passwords that you need to remember or enter regularly might be</p></blockquote><p>大概意思就是：<strong>为了保证各位程序员的账户安全，我们已于2021年7月14日禁止大家在git及第三方应用上通过密码授权GitHub。以后将使用token令牌代替密码。</strong><br>（话说能活跃在全球最大同性交友网站的程序猿能有什么秘密值得如此加密。。。）</p><h3 id="2-什么是token令牌？"><a href="#2-什么是token令牌？" class="headerlink" title="2.什么是token令牌？"></a>2.什么是token令牌？</h3><p>token令牌相当于在第三方接口代替你密码的一个玩意，有点像强密码。但是，token令牌并不是只能有唯一一个的。你可以拥有多个令牌，给不同的第三方接口不同的令牌，而每个令牌都被赋予了不同的权限和使用期限。也就是说，在令牌没赋予的权利将不会给第三方接口和git。当然，token令牌在你设定的期限之后，对应的第三方接口和git就需要你重新给一个令牌，否则也无法使用。令牌也可以随时更改权限和删除。</p><h3 id="3-如何申请token令牌？"><a href="#3-如何申请token令牌？" class="headerlink" title="3.如何申请token令牌？"></a>3.如何申请token令牌？</h3><p>登陆你的GitHub（<strong>注意，在github.com登录你的账户时还是用你的密码，不是令牌</strong>) 点击头像。随后点击settings。</p><p><img src="https://i.postimg.cc/VLBLHGhV/2.png!/scale/50"></p><p>往下拉，你会在左侧看到一个Developer settings。点击它。</p><p><img src="https://i.postimg.cc/1tqy0J6M/31.png"></p><p>左侧有Personal access tokens。点击它。</p><p><img src="https://i.postimg.cc/RZgCv341/4.png"></p><p>点击右侧generate new token。</p><p><img src="https://i.postimg.cc/sD20t1HC/5.png"></p><p>Note是你令牌的名称（不是令牌密码），随便填一个。</p><p>expiration是令牌有效期限。No expiration代表永久令牌。</p><p>下面是选择相应的权限。一般就选择repo 和delete_repo，其他按需勾选。</p><p>拉到最下面，点击generate token，随后跳出来一个界面，有一串绿底字符串即为你的token令牌。</p><p><img src="https://i.postimg.cc/NQk5NFqj/6.png"></p><p><strong>警告！！在这里你一定要将其复制并保存好！建议新建一个txt文件将令牌放入其中！因为这个令牌只会出现一次，你关闭了这个网页，以后GitHub就再也不会告诉你这个令牌了！妥善保管！</strong>（妥善保管！两情若是久长时，又岂在朝朝暮暮？）</p><p>返回刚才的界面，你可以查看已经创建的token和给予的权限与有效期。你可以随时更改，管理，删除它们（<strong>但是不会显示该令牌</strong>）。</p><p><img src="https://i.postimg.cc/XvhVyTZp/7.png"></p><p>随后回到你的git或第三方接口，账号还是输入你的username(用户名)，password就输入你复制的令牌。随后登陆就成功了。</p><h3 id="果然，全球最大的同性交流网站不是吹的，大七夕节非得找个伴侣，它要过七夕谁也拦不住呀！"><a href="#果然，全球最大的同性交流网站不是吹的，大七夕节非得找个伴侣，它要过七夕谁也拦不住呀！" class="headerlink" title="果然，全球最大的同性交流网站不是吹的，大七夕节非得找个伴侣，它要过七夕谁也拦不住呀！"></a>果然，全球最大的同性交流网站不是吹的，大七夕节非得找个伴侣，它要过七夕谁也拦不住呀！</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;原创文章，转载注明出处！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-问题背景-background&quot;&gt;&lt;a href=&quot;#1-问题背景-background&quot; class=&quot;headerlink&quot; title=&quot;1.问题背景-background&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++中如何使用struct和STL创建链表结构</title>
    <link href="https://billma.top/2021/08/21/stl_use/"/>
    <id>https://billma.top/2021/08/21/stl_use/</id>
    <published>2021-08-21T07:39:00.000Z</published>
    <updated>2021-08-23T06:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-链表结构的使用"><a href="#一-链表结构的使用" class="headerlink" title="一.链表结构的使用"></a>一.链表结构的使用</h2><h3 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;<span class="comment">//该链数据</span></span><br><span class="line">    node *next;<span class="comment">//指向链表下一个数据</span></span><br><span class="line">&#125;</span><br><span class="line">node *p;<span class="comment">//链表所在的地址</span></span><br></pre></td></tr></table></figure><h3 id="2-新增存储单元"><a href="#2-新增存储单元" class="headerlink" title="2.新增存储单元"></a>2.新增存储单元</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="keyword">new</span> node;</span><br></pre></td></tr></table></figure><h3 id="3-其他所需的操作符"><a href="#3-其他所需的操作符" class="headerlink" title="3.其他所需的操作符"></a>3.其他所需的操作符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node *head;<span class="comment">//指向头节点</span></span><br><span class="line">node *p;<span class="comment">//用来申请新的数据单元</span></span><br><span class="line">node *r;<span class="comment">//用来指向末节点(最后一个数据)</span></span><br></pre></td></tr></table></figure><h3 id="4-输入一个链表"><a href="#4-输入一个链表" class="headerlink" title="4.输入一个链表"></a>4.输入一个链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x;<span class="comment">//每次输入的数据</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="keyword">while</span> (<span class="comment">/*输入链条的终止条件*/</span>)&#123;</span><br><span class="line">    p=<span class="keyword">new</span> node;<span class="comment">//申请一个新节点</span></span><br><span class="line">    p-&gt;data=x;<span class="comment">//录入数据</span></span><br><span class="line">    p-&gt;next=<span class="literal">NULL</span>;<span class="comment">//初始化下一个节点避免闪退</span></span><br><span class="line">    r-&gt;next=p;<span class="comment">//将新节点接到前面链表中</span></span><br><span class="line">    r=p;<span class="comment">//末节点后移</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);<span class="comment">//输入下一个数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-输出链表"><a href="#5-输出链表" class="headerlink" title="5.输出链表"></a>5.输出链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p=head-&gt;next;<span class="comment">//p指针回到链表开头</span></span><br><span class="line"><span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,p-&gt;data);</span><br><span class="line">    p=p-&gt;next;<span class="comment">//到下一个节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,p-&gt;data);<span class="comment">//把最后一个数据也输出</span></span><br></pre></td></tr></table></figure><h3 id="6-查找某个条件的数据"><a href="#6-查找某个条件的数据" class="headerlink" title="6.查找某个条件的数据"></a>6.查找某个条件的数据</h3><h4 id="a-查找满足一定条件的节点"><a href="#a-查找满足一定条件的节点" class="headerlink" title="a.查找满足一定条件的节点"></a>a.查找满足一定条件的节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p=head-&gt;next;</span><br><span class="line"><span class="keyword">while</span>((p-&gt;data !=(满足的条件))&amp;&amp;(p-&gt;next !=<span class="literal">NULL</span>))p=p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(p-&gt;data ==(满足的条件))处理该数据;</span><br><span class="line"><span class="keyword">else</span> 输出不存在;</span><br></pre></td></tr></table></figure><h4 id="b-查找所有满足条件的点"><a href="#b-查找所有满足条件的点" class="headerlink" title="b.查找所有满足条件的点"></a>b.查找所有满足条件的点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p=head-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;data==(满足的条件))&#123;</span><br><span class="line">        <span class="comment">/*处理该数据*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-使用STL容器进行"><a href="#二-使用STL容器进行" class="headerlink" title="二.使用STL容器进行"></a>二.使用STL容器进行</h2><h3 id="a-set"><a href="#a-set" class="headerlink" title="a.set"></a>a.set</h3><h4 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h4><p>无序，随机，类似于指针（但其实不是指针，STL容器过于强大）</p><h4 id="2-头文件"><a href="#2-头文件" class="headerlink" title="2.头文件"></a>2.头文件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure><h4 id="3-定义容器"><a href="#3-定义容器" class="headerlink" title="3.定义容器"></a>3.定义容器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set&lt;kind&gt;name</span><br><span class="line"><span class="comment">/*例：*/</span>set&lt;string&gt;class_set;<span class="comment">//类中的一个学生列表</span></span><br></pre></td></tr></table></figure><h4 id="4-添加元素"><a href="#4-添加元素" class="headerlink" title="4.添加元素"></a>4.添加元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="comment">/*满足条件*/</span>)&#123;</span><br><span class="line">    string str;</span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">    class_set.<span class="built_in">insert</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-输出学生集合（无序的）"><a href="#5-输出学生集合（无序的）" class="headerlink" title="5.输出学生集合（无序的）"></a>5.输出学生集合（无序的）</h4><h5 id="1-创建迭代器"><a href="#1-创建迭代器" class="headerlink" title="[1]创建迭代器"></a>[1]创建迭代器</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set&lt;kind&gt;::const_iterator cur_name;<span class="comment">//cur_name为迭代器</span></span><br><span class="line"><span class="comment">/*example*/</span>set&lt;string&gt;::const_iterator cur_student;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-遍历输出"><a href="#2-遍历输出" class="headerlink" title="[2]遍历输出"></a>[2]遍历输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(cur_student = class_set.<span class="built_in">begin</span>();</span><br><span class="line">    cur_student !=class_set.<span class="built_in">end</span>();</span><br><span class="line">    cur_student++)cout&lt;&lt;*cur_student&lt;&lt;endl;</span><br></pre></td></tr></table></figure><blockquote><p>cur_student被定义成string类型的迭代器，类似于指针地址</p></blockquote><blockquote><p>初始条件：cur_student指针指向class_set.begin()的地址</p></blockquote><blockquote><p>终止条件：cur_student指针指向class_set.end()的地址</p></blockquote><p><em><strong>注意：不能将for循环里面的！=改成&lt;或者其他符号，因为列表是无序的。++指的是地址后移一位，而不是数字+1</strong></em></p><h5 id="3-使用foreach函数进行遍历输出"><a href="#3-使用foreach函数进行遍历输出" class="headerlink" title="[3]使用foreach函数进行遍历输出"></a>[3]使用foreach函数进行遍历输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.头文件*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">/*2.创建输出指令*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(set&lt;string&gt;::const_iterator cur_student)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;*cur_student&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*3.使用foreach进行遍历*/</span></span><br><span class="line">foreach(class_set.<span class="built_in">begin</span>(),class_set.<span class="built_in">end</span>(),write);</span><br></pre></td></tr></table></figure><h4 id="6-其它"><a href="#6-其它" class="headerlink" title="6.其它"></a>6.其它</h4><p>set容器当中不能有重复的元素，否则程序会意外终止。如果你想要存放重复元素，你可以将上述set换成multiset即可。</p><h3 id="b-map"><a href="#b-map" class="headerlink" title="b.map"></a>b.map</h3><h4 id="1-特点-1"><a href="#1-特点-1" class="headerlink" title="1.特点"></a>1.特点</h4><p>不同于set，map有两个值，第一个可以称为关键字(key)，每个关键字只能在map中出现一次；第二个可能称为该关键字的值(value)；</p><p>key在一个map只能出现一次，但是value可以出现多次。</p><p>key和value是一对一(one-to-one)的，而不同于set，map是有序对。</p><h4 id="2-头文件-1"><a href="#2-头文件-1" class="headerlink" title="2.头文件"></a>2.头文件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure><h4 id="3-声明map"><a href="#3-声明map" class="headerlink" title="3.声明map"></a>3.声明map</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std:map&lt;type1,type2&gt; variable;</span><br><span class="line"><span class="comment">/*example*/</span>std:map&lt;<span class="keyword">int</span>,string&gt; person;</span><br></pre></td></tr></table></figure><p>当然，如果你觉得每次都定义一个map太烦了，你可以使用<code>typedef</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> map&lt;<span class="keyword">int</span>,string&gt; mapp;</span><br><span class="line">mapp variable1;</span><br><span class="line">mapp variable2;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="4-加入元素"><a href="#4-加入元素" class="headerlink" title="4.加入元素"></a>4.加入元素</h4><p>现在，我们已经声明了一个叫做<code>variable</code>的map容器(你自己随便声明一个也无所谓)。插入有几种方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//First Kind:INSERT function</span></span><br><span class="line"><span class="comment">//1.insert+pair</span></span><br><span class="line">varibale.<span class="built_in">insert</span>(pair&lt;type1,type2&gt;(key,value));</span><br><span class="line"><span class="comment">/*example*/</span>variable.<span class="built_in">insert</span>(pair&lt;<span class="keyword">int</span>,string&gt;(<span class="number">1</span>,<span class="string">&quot;Bill Gates&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.insert+value_type</span></span><br><span class="line">variable.<span class="built_in">insert</span>(map&lt;type1,type2&gt;::<span class="built_in">value_type</span>(key,value));</span><br><span class="line"><span class="comment">/*example*/</span>variable.<span class="built_in">insert</span>(map&lt;<span class="keyword">int</span>,string&gt;::<span class="built_in">value_type</span>(<span class="number">2</span>,<span class="string">&quot;Jeff Bezos&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Second Kind:Array[]</span></span><br><span class="line">variable[key]=value;</span><br><span class="line"><span class="comment">/*example*/</span>variable[<span class="number">3</span>]=<span class="string">&quot;Michael Dell&quot;</span>;</span><br></pre></td></tr></table></figure><p>为什么我要分为两种呢？因为使用insert+pair和insert+value_type组合效果是相同的。他俩都是通过insert函数插入数据。但是，如果某key已经有了一个value，insert函数是会自动跳过不执行指令的。如果使用array数组进行插入，新输入的数据就会把原有的数据覆盖住。</p><h4 id="5-查找元素"><a href="#5-查找元素" class="headerlink" title="5.查找元素"></a>5.查找元素</h4><p>这个时候又要用到迭代器了。先声明一个迭代器iterate，随后循环查找：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iterate = variable.<span class="built_in">find</span>(key);</span><br><span class="line"><span class="keyword">while</span>(iterate != variable.<span class="built_in">end</span>())&#123;</span><br><span class="line">    <span class="comment">/*处理该数据*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-删除元素"><a href="#6-删除元素" class="headerlink" title="6.删除元素"></a>6.删除元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.iterate</span></span><br><span class="line">iterate =variable.<span class="built_in">find</span>(key);</span><br><span class="line"><span class="keyword">int</span> del =variable.<span class="built_in">erase</span>(iterate);</span><br><span class="line"><span class="comment">//erase函数删除成功返回1，否则返回0，下同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.key</span></span><br><span class="line"><span class="keyword">int</span> del =variable.<span class="built_in">erase</span>(key);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.delete key1~key2</span></span><br><span class="line"><span class="keyword">int</span> del =variable.<span class="built_in">erase</span>(key1,key2);</span><br><span class="line"><span class="comment">//把key1到key2之间所有的数据全部删除</span></span><br><span class="line"><span class="comment">//如果想删除某map所有数据，有以下两种办法：</span></span><br><span class="line"><span class="comment">/*1*/</span><span class="keyword">int</span> del =variable.<span class="built_in">erase</span>(variable.<span class="built_in">begin</span>(),variable.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">/*2*/</span><span class="keyword">int</span> del =variable.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure><h4 id="7-map大小"><a href="#7-map大小" class="headerlink" title="7.map大小"></a>7.map大小</h4><p>我怎么知道map里面目前有多少数据呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num =variable.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure><p>未完待续。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-链表结构的使用&quot;&gt;&lt;a href=&quot;#一-链表结构的使用&quot; class=&quot;headerlink&quot; title=&quot;一.链表结构的使用&quot;&gt;&lt;/a&gt;一.链表结构的使用&lt;/h2&gt;&lt;h3 id=&quot;1-创建&quot;&gt;&lt;a href=&quot;#1-创建&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://billma.top/2021/08/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://billma.top/2021/08/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-08-09T20:23:52.000Z</published>
    <updated>2021-08-24T02:23:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先-欢迎各位到访我的空间"><a href="#首先-欢迎各位到访我的空间" class="headerlink" title="首先,欢迎各位到访我的空间"></a>首先,欢迎各位到访我的空间</h3><p>一直没时间打理这个博客,时至今日,终于在凌晨从百忙中完成了我的第一篇博客.<br>这就算我的第一篇博客吧.</p><iframe src="//player.bilibili.com/player.html?aid=459511106&bvid=BV1t5411K71N&cid=309837458&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;首先-欢迎各位到访我的空间&quot;&gt;&lt;a href=&quot;#首先-欢迎各位到访我的空间&quot; class=&quot;headerlink&quot; title=&quot;首先,欢迎各位到访我的空间&quot;&gt;&lt;/a&gt;首先,欢迎各位到访我的空间&lt;/h3&gt;&lt;p&gt;一直没时间打理这个博客,时至今日,终于在凌晨从百忙中</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Calall产品发布页</title>
    <link href="https://billma.top/2021/08/07/calall2/"/>
    <id>https://billma.top/2021/08/07/calall2/</id>
    <published>2021-08-07T08:33:29.000Z</published>
    <updated>2021-08-09T21:13:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Calall是我独自设计的一款多功能计算器，可以精确计算指数函数，对数函数，7种三角函数，阶乘，以及发送邮件，定时关机/重启电脑，多种经典单机游戏等多功能。<br><a href="https://billma007.law.blog/calall-3-0-1developer-beta2%e7%8e%b0%e5%b7%b2%e4%b8%8a%e7%ba%bf%ef%bc%81/">点此前往Calall Developer Beta2发布页</a><br><a href="">点此前往Calall Developer Beta3发布页</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Calall是我独自设计的一款多功能计算器，可以精确计算指数函数，对数函数，7种三角函数，阶乘，以及发送邮件，定时关机/重启电脑，多种经典单机游戏等多功能。&lt;br&gt;&lt;a href=&quot;https://billma007.law.blog/calall-3-0-1develop</summary>
      
    
    
    
    
  </entry>
  
</feed>
